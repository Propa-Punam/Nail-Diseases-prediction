# -*- coding: utf-8 -*-
"""evaluate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HJhrCWhOzjM1kWTYAC1xQiSishDDB3bK
"""

import torch
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from src.hybrid_model import HybridModel
from torchvision import datasets, transforms

# Load dataset and data augmentation
dataset_dir = 'data/Nail Dataset'
dataset = datasets.ImageFolder(root=dataset_dir, transform=transforms.ToTensor())
val_loader = prepare_dataloaders(dataset, batch_size=32)[1]

# Load the trained model
input_dim = 2048
feature_extractor = FeatureExtractor()
vit_model = VisionTransformerClassifier(input_dim)
hybrid_model = HybridModel(feature_extractor, vit_model)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
hybrid_model.load_state_dict(torch.load('models/hybrid_image_classifier.pth'))
hybrid_model.to(device)

# Evaluate the model and generate confusion matrix
all_preds, all_labels = [], []
with torch.no_grad():
    for inputs, labels in val_loader:
        inputs = inputs.to(device)
        outputs = hybrid_model(inputs)
        preds = torch.sigmoid(outputs.squeeze()).cpu().numpy()
        all_preds.extend(preds.round())
        all_labels.extend(labels.numpy())

cm = confusion_matrix(all_labels, all_preds)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=dataset.classes)
disp.plot(cmap='Blues')
plt.savefig('results/confusion_matrix.png')
plt.show()