# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HJhrCWhOzjM1kWTYAC1xQiSishDDB3bK
"""

import torch
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
from src.hybrid_model import HybridModel
from src.early_stopping import EarlyStopping
from src.utils import prepare_dataloaders, plot_metrics

# Load dataset and data augmentation
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.RandomVerticalFlip(),
    transforms.RandomRotation(30),
    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),
    transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),
    transforms.RandomResizedCrop(size=224, scale=(0.8, 1.0)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

dataset_dir = 'data/Nail Dataset'
dataset = datasets.ImageFolder(root=dataset_dir, transform=transform)

train_loader, val_loader = prepare_dataloaders(dataset, batch_size=32)

# Model, optimizer, and loss function
input_dim = 2048
feature_extractor = FeatureExtractor()
vit_model = VisionTransformerClassifier(input_dim)
hybrid_model = HybridModel(feature_extractor, vit_model)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
hybrid_model.to(device)

criterion = torch.nn.BCEWithLogitsLoss()
optimizer = optim.Adam(hybrid_model.parameters(), lr=1e-4, weight_decay=1e-4)
scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.7, patience=2, verbose=True)

early_stopping = EarlyStopping(patience=5, delta=0.001)

# Training loop
num_epochs = 20
train_losses, val_losses, train_accuracies, val_accuracies = [], [], [], []

for epoch in range(num_epochs):
    # Training and validation code
    # Append losses and accuracies

    if early_stopping.early_stop:
        break

# Save the model
torch.save(hybrid_model.state_dict(), 'models/hybrid_image_classifier.pth')

# Plot results
plot_metrics(train_losses, val_losses, 'Loss', 'results/loss_vs_epochs.png')
plot_metrics(train_accuracies, val_accuracies, 'Accuracy', 'results/accuracy_vs_epochs.png')